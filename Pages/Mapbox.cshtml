@page "/Mapbox"
@model MapboxModel
@{ ViewData["Title"] = "Mapbox App"; }

<div id="mapboxDiv" class="mapboxView">
</div>

@section Scripts {
    <script>

        var loadMapbox = {};

        const mapboxContainerId = "mapboxDiv";

        if (IsNullish(window.Mapbox)) {

            const mapboxScript = createHtmlElement({
                tag: "script",
                type: "text/javascript",
                src: "https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.js",
                onload: "loadMapbox()",
                location: document.head
            });

            const mapboxStyle = createHtmlElement({
                tag: "link",
                rel: "stylesheet",
                href: "https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.css",
                location: document.head
            });

        } else {
            loadMapbox();
        }

        function AddFrameRateControl(map) {

            const fps = new FrameRateControl({
                background: "rgba(0, 0, 0, 0.1)",
                barWidth: 4 * window.devicePixelRatio,
                color: "#7cf859",
                graphHeight: 60 * window.devicePixelRatio,
                graphWidth: 90 * window.devicePixelRatio,
                graphTop: 0,
                graphRight: 5 * window.devicePixelRatio,
                width: 100 * window.devicePixelRatio
            });

            map.addControl(fps);
        }

        function AddSourceToMap(map, dataSourceName, dataSource) {
            map.addSource(dataSourceName, {
                type: "geojson",
                data: dataSource
            });
        }

        function AddLayerToMap(map, dataSourceName) {
            map.addLayer({
                "id": dataSourceName,
                "type": "line",
                //"metadata": mixed,
                "source": dataSourceName,
                //"source-layer": string,
                //"minzoom": number,
                //"maxzoom": number,
                //"filter": FilterSpecification,
                "layout": {
                    "line-cap": "round",
                    "line-join": "round",
                    "visibility": "visible"
                },
                "paint": {
                    //"line-opacity": DataDrivenPropertyValueSpecification<number>,
                    "line-color": "rgba(255,0,0,255)",
                    //"line-translate": PropertyValueSpecification<[number, number]>,
                    //"line-translate-anchor": PropertyValueSpecification<"map" | "viewport">,
                    "line-width": 8
                    //"line-gap-width": DataDrivenPropertyValueSpecification<number>,
                    //"line-offset": DataDrivenPropertyValueSpecification<number>,
                    //"line-blur": DataDrivenPropertyValueSpecification<number>,
                    //"line-dasharray": PropertyValueSpecification<Array<number>>,
                    //"line-pattern": DataDrivenPropertyValueSpecification<ResolvedImageSpecification>,
                    //"line-gradient": ExpressionSpecification
                }
            });
        }

        function AddMousePointer(layerId) {
            window.map.on("mouseenter", layerId, function() {
                window.map.getCanvas().style.cursor = "pointer";
            });

            window.map.on("mouseleave", layerId, function() {
                window.map.getCanvas().style.cursor = "";
            });
        }

        function getDataSourceUrl(rootUrl, variable) {
            return `${rootUrl}/data/${variable}`;
        };

        window.map = {};

        var dataEvent; // = new EventSource("/api/sse");

        const onopen = function(event) {

            window.mapboxgl.accessToken = "pk.eyJ1IjoidHJtY25lYWx5IiwiYSI6ImNrZDN3aGNvMzBxNjQycW16Zml2M2UwZmcifQ.aT8sIrXsA2pHPSjw_U-fUA";

            window.map = new window.mapboxgl.Map({
                container: mapboxContainerId,
                style: "mapbox://styles/mapbox/dark-v10",
                //center: [-99.33, 31.64],
                bounds: [[-106.52775578, 25.85656136], [-93.53154648, 36.49897217]]
                //zoom: 6
            });

            window.map.dragRotate.disable();

            window.map.touchZoomRotate.disableRotation();

            window.map.boxZoom.disable();

            window.map.addControl(new window.mapboxgl.NavigationControl({
                showCompass: false
            }), "bottom-right");

            window.map.addControl(new window.mapboxgl.FullscreenControl(), "top-right");

            AddFrameRateControl(window.map);
        };

        const WellLocationsId = "WellLocations";
        const ReservoirDataId = "ReservoirData";
        const GasPropertiesId = "GasProperties";
        const OilPropertiesId = "OilProperties";

        const onmessage = function(event) {

            //window.sessionStorage.setItem("MapboxData", JSON.parse(event.data));

            window.map.on("load", function() {

                const urls = JSON.parse(event.data);

                const wellsLocations = getDataSourceUrl(window.location.origin, urls.WellLocations);
                const reservoirData = getDataSourceUrl(window.location.origin, urls.ReservoirData);
                const gasProperties = getDataSourceUrl(window.location.origin, urls.GasProperties);
                const oilProperties = getDataSourceUrl(window.location.origin, urls.OilProperties);

                window.map.addSource(WellLocationsId, {
                    type: "geojson",
                    data: wellsLocations
                });

                window.map.addLayer({
                    id: WellLocationsId,
                    type: "line",
                    source: WellLocationsId,
                    layout: {
                        "visibility": "visible",
                        "line-join": "round",
                        "line-cap": "round"
                    },
                    paint: {
                        "line-color": "#0000FF",
                        "line-width": 2
                    }
                });

                window.map.addSource(ReservoirDataId, {
                    type: "geojson",
                    data: reservoirData
                });

                window.map.addLayer({
                    id: ReservoirDataId,
                    type: "circle",
                    source: ReservoirDataId,
                    layout: {
                        "visibility": "none"
                    },
                    paint: {
                        "circle-radius": {
                            base: 3,
                            "stops": [
                                [12, 5],
                                [22, 180]
                            ]
                        },
                        "circle-color": colorMethods.GradientRgb("ReservoirDepth", "#ffffff", "#ff0000", 6, 8000, 18000)
                    }
                });

                window.map.addSource(GasPropertiesId, {
                    type: "geojson",
                    data: gasProperties
                });

                window.map.addLayer({
                    id: GasPropertiesId,
                    type: "circle",
                    source: GasPropertiesId,
                    layout: {
                        "visibility": "visible"
                    },
                    paint: {
                        "circle-radius": {
                            base: 3,
                            "stops": [
                                [12, 5],
                                [22, 180]
                            ]
                        },
                        "circle-color": colorMethods.GradientRgb("GasSpecificGravity", "#ffff00", "#ff0000", 6, 0.5, 1.0)
                    }
                });

                window.map.addSource(OilPropertiesId, {
                    type: "geojson",
                    data: oilProperties
                });

                window.map.addLayer({
                    id: OilPropertiesId,
                    type: "circle",
                    source: OilPropertiesId,
                    layout: {
                        "visibility": "none"
                    },
                    paint: {
                        "circle-radius": {
                            base: 3,
                            "stops": [
                                [12, 5],
                                [22, 180]
                            ]
                        },
                        "circle-color": colorMethods.GradientRgb("OilApiGravity", "#00ff00", "#ff0000", 6, 10, 70)
                    }
                });

                AddMousePointer(WellLocationsId);
                window.map.on("click", WellLocationsId, function(e) {

                    const coordinates = e.features[0].geometry.coordinates[0];

                    const description = sls`<table style="width:100%">
                                            <tr><td>API</td><td>${e.features[0].properties.API}</td></tr>
                                            </table>`;

                    //const description = sls`<table style="width:100%">
                    //<tr><td>API</td><td>${e.features[0].properties.API}</td></tr>
                    //<tr><td>Name</td><td>${e.features[0].properties.Name}</td></tr>
                    //<tr><td>Number</td><td>${e.features[0].properties.Number}</td></tr>
                    //<tr><td>Lease</td><td>${e.features[0].properties.Lease}</td></tr>
                    //<tr><td>Field</td><td>${e.features[0].properties.Field}</td></tr>
                    //<tr><td>Company</td><td>${e.features[0].properties.Company}</td></tr>
                    //<tr><td>ReservoirName</td><td>${e.features[0].properties.ReservoirName}</td></tr>
                    //<tr><td>ReservoirDepth</td><td>${e.features[0].properties.ReservoirDepth}</td></tr>
                    //<tr><td>GasSpecificGravity</td><td>${e.features[0].properties.GasSpecificGravity}</td></tr>
                    //<tr><td>OilApiGravity</td><td>${e.features[0].properties.OilApiGravity}</td></tr>
                    //</table>`;

                    new window.mapboxgl.Popup()
                        .setLngLat(coordinates)
                        .setHTML(description)
                        .addTo(window.map);
                });

                AddMousePointer(ReservoirDataId);
                window.map.on("click", ReservoirDataId, function(e) {

                    const coordinates = e.features[0].geometry.coordinates;

                    const description = sls`<table style="width:100%">
                                                <tr><td>API</td><td>${e.features[0].properties.API}</td></tr>
                                                <tr><td>Name</td><td>${e.features[0].properties.Name}</td></tr>
                                                <tr><td>Number</td><td>${e.features[0].properties.Number}</td></tr>
                                                <tr><td>Lease</td><td>${e.features[0].properties.Lease}</td></tr>
                                                <tr><td>Field</td><td>${e.features[0].properties.Field}</td></tr>
                                                <tr><td>Company</td><td>${e.features[0].properties.Company}</td></tr>
                                                <tr><td>ReservoirName</td><td>${e.features[0].properties.ReservoirName}</td></tr>
                                                <tr><td>ReservoirDepth</td><td>${e.features[0].properties.ReservoirDepth.toFixed(2)}</td></tr>
                                                </table>`;

                    new window.mapboxgl.Popup()
                        .setLngLat(coordinates)
                        .setHTML(description)
                        .addTo(window.map);
                });

                AddMousePointer(GasPropertiesId);
                window.map.on("click", GasPropertiesId, function(e) {

                    const coordinates = e.features[0].geometry.coordinates;

                    const description = sls`<table style="width:100%">
                                                <tr><td>API</td><td>${e.features[0].properties.API}</td></tr>
                                                <tr><td>Name</td><td>${e.features[0].properties.Name}</td></tr>
                                                <tr><td>Number</td><td>${e.features[0].properties.Number}</td></tr>
                                                <tr><td>Lease</td><td>${e.features[0].properties.Lease}</td></tr>
                                                <tr><td>Field</td><td>${e.features[0].properties.Field}</td></tr>
                                                <tr><td>Company</td><td>${e.features[0].properties.Company}</td></tr>
                                                <tr><td>GasSpecificGravity</td><td>${e.features[0].properties.GasSpecificGravity.toFixed(4)}</td></tr>
                                                </table>`;

                    new window.mapboxgl.Popup()
                        .setLngLat(coordinates)
                        .setHTML(description)
                        .addTo(window.map);
                });

                AddMousePointer(OilPropertiesId);
                window.map.on("click", OilPropertiesId, function(e) {

                    const coordinates = e.features[0].geometry.coordinates;

                    const description = sls`<table style="width:100%">
                                            <tr><td>API</td><td>${e.features[0].properties.API}</td></tr>
                                            <tr><td>Name</td><td>${e.features[0].properties.Name}</td></tr>
                                            <tr><td>Number</td><td>${e.features[0].properties.Number}</td></tr>
                                            <tr><td>Lease</td><td>${e.features[0].properties.Lease}</td></tr>
                                            <tr><td>Field</td><td>${e.features[0].properties.Field}</td></tr>
                                            <tr><td>Company</td><td>${e.features[0].properties.Company}</td></tr>
                                            <tr><td>OilApiGravity</td><td>${e.features[0].properties.OilApiGravity.toFixed(2)}</td></tr>
                                            </table>`;

                    new window.mapboxgl.Popup()
                        .setLngLat(coordinates)
                        .setHTML(description)
                        .addTo(window.map);
                });
            });




            @*map.addLayer(
                    {
                        "id": "counties-highlighted",
                        "type": "fill",
                        "source": "counties",
                        "source-layer": "original",
                        "paint": {
                            "fill-outline-color": "#484896",
                            "fill-color": "#6e599f",
                            "fill-opacity": 0.75
                        },
                        "filter": ["in", "FIPS", ""]
                    },
                    "settlement-label"
                );

                //=================================
                
                var canvas = window.map.getCanvasContainer();

                // Variable to hold the starting xy coordinates
                // when `mousedown` occured.
                var start;

                // Variable to hold the current xy coordinates
                // when `mousemove` or `mouseup` occurs.
                var current;

                // Variable for the draw box element.
                var box;

                // Return the xy coordinates of the mouse position
                function mousePos(e) {
                    var rect = canvas.getBoundingClientRect();
                    return new window.mapboxgl.Point(
                        e.clientX - rect.left - canvas.clientLeft,
                        e.clientY - rect.top - canvas.clientTop
                    );
                }

                function mouseDown(e) {
                    // Continue the rest of the function if the shiftkey is pressed.
                    if (!(e.shiftKey && e.button === 0)) {
                        return;
                    }

                    // Disable default drag zooming when the shift key is held down.
                    window.map.dragPan.disable();

                    // Call functions for the following events
                    document.addEventListener("mousemove", onMouseMove);
                    document.addEventListener("mouseup", onMouseUp);
                    document.addEventListener("keydown", onKeyDown);

                    // Capture the first xy coordinates
                    start = mousePos(e);
                }

                function onMouseMove(e) {
                    // Capture the ongoing xy coordinates
                    current = mousePos(e);

                    // Append the box element if it doesnt exist
                    if (!box) {
                        box = document.createElement("div");
                        box.classList.add("boxdraw");
                        canvas.appendChild(box);
                    }

                    var minX = Math.min(start.x, current.x),
                        maxX = Math.max(start.x, current.x),
                        minY = Math.min(start.y, current.y),
                        maxY = Math.max(start.y, current.y);

                    // Adjust width and xy position of the box element ongoing
                    var pos = "translate(" + minX + "px," + minY + "px)";
                    box.style.transform = pos;
                    box.style.WebkitTransform = pos;
                    box.style.width = maxX - minX + "px";
                    box.style.height = maxY - minY + "px";
                }

                function onMouseUp(e) {
                    // Capture xy coordinates
                    finish([start, mousePos(e)]);
                }

                function onKeyDown(e) {
                    // If the ESC key is pressed
                    if (e.keyCode === 27) {
                        finish();
                    }
                }

                function finish(bbox) {
                    // Remove these events now that finish has been called.
                    document.removeEventListener("mousemove", onMouseMove);
                    document.removeEventListener("keydown", onKeyDown);
                    document.removeEventListener("mouseup", onMouseUp);

                    if (box) {
                        box.parentNode.removeChild(box);
                        box = null;
                    }

                    // If bbox exists. use this value as the argument for `queryRenderedFeatures`
                    if (bbox) {
                        var features = window.map.queryRenderedFeatures(bbox, {
                            layers: ["counties"]
                        });

                        if (features.length >= 1000) {
                            return window.alert("Select a smaller number of features");
                        }

                        // Run through the selected features and set a filter
                        // to match features with unique FIPS codes to activate
                        // the `counties-highlighted` layer.
                        var filter = features.reduce(
                            function(memo, feature) {
                                memo.push(feature.properties.FIPS);
                                return memo;
                            },
                            ["in", "FIPS"]
                        );

                        window.map.setFilter("counties-highlighted", filter);
                    }

                    window.map.dragPan.enable();
                }

                canvas.addEventListener("mousedown", mouseDown, true);

                window.map.on("mousemove", function(e) {

                    var features = window.map.queryRenderedFeatures(e.point, {
                        layers: ["counties-highlighted"]
                    });

                    // Change the cursor style as a UI indicator.
                    window.map.getCanvas().style.cursor = features.length ? "pointer" : "";

                    if (!features.length) {
                        popup.remove();
                        return;
                    }

                    var feature = features[0];

                    popup.setLngLat(e.lngLat)
                        .setText(feature.properties.COUNTY)
                        .addTo(window.map);
                });*@

            //var mapboxDiv = document.getElementById("mapboxDiv");
            //mapboxDiv.classList.remove("spinner");
            //mapboxDiv.classList.add("mapboxView");
            //mapboxDiv.style = "padding: 0;margin: 0;width: 100%;height: 100%;";

        };

        //"source-layer": string,
        //"minzoom": number,
        //"maxzoom": number,
        //"filter": FilterSpecification,
        //"layout": {
        //    "line-cap": "round",
        //    "line-join": "round",
        //    "visibility": "visible"
        //},
        //"paint": {
        //    //"line-opacity": DataDrivenPropertyValueSpecification<number>,
        //    "line-color": "rgba(255,0,0,255)",
        //    //"line-translate": PropertyValueSpecification<[number, number]>,
        //    //"line-translate-anchor": PropertyValueSpecification<"map" | "viewport">,
        //    "line-width": 8
        //    //"line-gap-width": DataDrivenPropertyValueSpecification<number>,
        //    //"line-offset": DataDrivenPropertyValueSpecification<number>,
        //    //"line-blur": DataDrivenPropertyValueSpecification<number>,
        //    //"line-dasharray": PropertyValueSpecification<Array<number>>,
        //    //"line-pattern": DataDrivenPropertyValueSpecification<ResolvedImageSpecification>,
        //    //"line-gradient": ExpressionSpecification
        //}

        const onerror = function(event) {

            console.error(event);
            dataEvent.close();
        }

        loadMapbox = async function() {

            if (IsNullish(dataEvent)) {
                dataEvent = new EventSource("/api/sse");
                dataEvent.onopen = onopen;
                dataEvent.onmessage = onmessage;
                dataEvent.onerror = onerror;
            }

            //mapboxgl.accessToken = "pk.eyJ1IjoidHJtY25lYWx5IiwiYSI6ImNrZDN3aGNvMzBxNjQycW16Zml2M2UwZmcifQ.aT8sIrXsA2pHPSjw_U-fUA";

            //const map = new mapboxgl.Map({
            //    container: mapboxContainerId,
            //    style: "mapbox://styles/mapbox/dark-v10",
            //    center: [-99.33, 31.64],
            //    zoom: 6
            //});

            ////Point
            ////const data = [
            ////    {
            ////        type: "scattermapbox",
            ////        text: jsonData.text.map(f => `API: ${f}`),
            ////        lon: jsonData.lon,
            ////        lat: jsonData.lat,
            ////        mode: "markers",
            ////        marker: {
            ////            color: "rgba(255,0,0,255)",
            ////            size: 3
            ////        }
            ////    }
            ////];

            //spinAndWaitUntil(IsNullish());

            //GetVariable("MapboxData").then(function(value) {
            //    window.sessionStorage.setItem("MapboxData", value);
            //    return value;
            //});

            ////window.sessionStorage.setItem("MapboxData", JSON.stringify(value));

            //map.on("load", function() {

            //    map.addSource("WellLocations", {
            //        type: "geojson",
            //        data: value
            //    });

            //    map.addLayer({
            //        "id": "WellLocations",
            //        "type": "line",
            //        //"metadata": mixed,
            //        "source": "WellLocations",
            //        //"source-layer": string,
            //        //"minzoom": number,
            //        //"maxzoom": number,
            //        //"filter": FilterSpecification,
            //        "layout": {
            //            "line-cap": "round",
            //            "line-join": "round",
            //            "visibility": "visible"
            //        },
            //        "paint": {
            //            //"line-opacity": DataDrivenPropertyValueSpecification<number>,
            //            "line-color": "rgba(255,0,0,255)",
            //            //"line-translate": PropertyValueSpecification<[number, number]>,
            //            //"line-translate-anchor": PropertyValueSpecification<"map" | "viewport">,
            //            "line-width": 8
            //            //"line-gap-width": DataDrivenPropertyValueSpecification<number>,
            //            //"line-offset": DataDrivenPropertyValueSpecification<number>,
            //            //"line-blur": DataDrivenPropertyValueSpecification<number>,
            //            //"line-dasharray": PropertyValueSpecification<Array<number>>,
            //            //"line-pattern": DataDrivenPropertyValueSpecification<ResolvedImageSpecification>,
            //            //"line-gradient": ExpressionSpecification
            //        }
            //    });

            //    AddFrameRateControl(map);
            //});

            return await Promise.resolve();
        };

    </script>
}